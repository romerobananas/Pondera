import React, { FunctionComponent } from "react";
export interface GetStepOptions {
    routeTitle?: string;
}
export interface UseWizard {
    activeStepIndex: number;
    maxActivatedStepIndex: number;
    goToStep: (stepIndex: number) => void;
    moveToStep: (stepIndex: number) => void;
    resetToStep: (stepIndex: number) => void;
    nextStep: () => void;
    previousStep: () => void;
    getStep: (options?: GetStepOptions) => Step;
}
export interface Step {
    index: number;
    isActive: boolean;
    hasBeenActive: boolean;
    nextStep: () => void;
    previousStep: () => void;
    resetToStep: () => void;
    moveToStep: () => void;
}
declare type OnChangeHandler = (props: {
    newStepIndex: number;
    previousStepIndex: number;
    maxActivatedStepIndex: number;
}) => void;
export interface UseWizardProps {
    initialStepIndex?: number;
    onChange?: OnChangeHandler;
}
export declare const useWizard: ({ initialStepIndex, onChange }?: UseWizardProps) => {
    activeStepIndex: number;
    maxActivatedStepIndex: number;
    goToStep: (stepIndex: number, { resetMaxStepIndex }?: {
        resetMaxStepIndex?: boolean | undefined;
    }) => void;
    nextStep: () => void;
    previousStep: () => void;
    getStep: (options?: GetStepOptions | undefined) => Step;
    moveToStep: (stepIndex: number) => void;
    resetToStep: (stepIndex: number) => void;
};
export interface WizardProps {
    children: ((useWizard: UseWizard) => React.ReactNode) | React.ReactNode;
    initialStepIndex?: number;
    onChange?: OnChangeHandler;
}
export declare const Wizard: FunctionComponent<WizardProps>;
export interface WizardStepProps {
    children: (step: Step) => React.ReactNode | any;
    routeTitle?: string;
}
export declare const WizardStep: FunctionComponent<WizardStepProps>;
export default Wizard;
